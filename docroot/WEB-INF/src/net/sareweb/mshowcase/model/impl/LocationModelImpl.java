/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.mshowcase.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.mshowcase.model.Location;
import net.sareweb.mshowcase.model.LocationModel;
import net.sareweb.mshowcase.model.LocationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;msc_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.mshowcase.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author Aritz Galdos
 * @see LocationImpl
 * @see net.sareweb.mshowcase.model.Location
 * @see net.sareweb.mshowcase.model.LocationModel
 * @generated
 */
@JSON(strict = true)
public class LocationModelImpl extends BaseModelImpl<Location>
	implements LocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link net.sareweb.mshowcase.model.Location} interface instead.
	 */
	public static final String TABLE_NAME = "msc_Location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "locationId", Types.BIGINT },
			{ "address", Types.VARCHAR },
			{ "lat", Types.FLOAT },
			{ "lng", Types.FLOAT },
			{ "imageId", Types.BIGINT },
			{ "imageURL", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table msc_Location (locationId LONG not null primary key,address VARCHAR(75) null,lat DOUBLE,lng DOUBLE,imageId LONG,imageURL VARCHAR(75) null,userId LONG,companyId LONG,groupId LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table msc_Location";
	public static final String ORDER_BY_JPQL = " ORDER BY location.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY msc_Location.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.mshowcase.model.Location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.mshowcase.model.Location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Location toModel(LocationSoap soapModel) {
		Location model = new LocationImpl();

		model.setLocationId(soapModel.getLocationId());
		model.setAddress(soapModel.getAddress());
		model.setLat(soapModel.getLat());
		model.setLng(soapModel.getLng());
		model.setImageId(soapModel.getImageId());
		model.setImageURL(soapModel.getImageURL());
		model.setUserId(soapModel.getUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Location> toModels(LocationSoap[] soapModels) {
		List<Location> models = new ArrayList<Location>(soapModels.length);

		for (LocationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.mshowcase.model.Location"));

	public LocationModelImpl() {
	}

	public long getPrimaryKey() {
		return _locationId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLocationId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_locationId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Location.class;
	}

	public String getModelClassName() {
		return Location.class.getName();
	}

	@JSON
	public long getLocationId() {
		return _locationId;
	}

	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public float getLat() {
		return _lat;
	}

	public void setLat(float lat) {
		_lat = lat;
	}

	@JSON
	public float getLng() {
		return _lng;
	}

	public void setLng(float lng) {
		_lng = lng;
	}

	@JSON
	public long getImageId() {
		return _imageId;
	}

	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	public String getImageURL() {
		if (_imageURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageURL;
		}
	}

	public void setImageURL(String imageURL) {
		_imageURL = imageURL;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Location toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Location.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		LocationImpl locationImpl = new LocationImpl();

		locationImpl.setLocationId(getLocationId());
		locationImpl.setAddress(getAddress());
		locationImpl.setLat(getLat());
		locationImpl.setLng(getLng());
		locationImpl.setImageId(getImageId());
		locationImpl.setImageURL(getImageURL());
		locationImpl.setUserId(getUserId());
		locationImpl.setCompanyId(getCompanyId());
		locationImpl.setGroupId(getGroupId());
		locationImpl.setCreateDate(getCreateDate());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	public int compareTo(Location location) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), location.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Location location = null;

		try {
			location = (Location)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Location> toCacheModel() {
		LocationCacheModel locationCacheModel = new LocationCacheModel();

		locationCacheModel.locationId = getLocationId();

		locationCacheModel.address = getAddress();

		String address = locationCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			locationCacheModel.address = null;
		}

		locationCacheModel.lat = getLat();

		locationCacheModel.lng = getLng();

		locationCacheModel.imageId = getImageId();

		locationCacheModel.imageURL = getImageURL();

		String imageURL = locationCacheModel.imageURL;

		if ((imageURL != null) && (imageURL.length() == 0)) {
			locationCacheModel.imageURL = null;
		}

		locationCacheModel.userId = getUserId();

		locationCacheModel.companyId = getCompanyId();

		locationCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			locationCacheModel.createDate = createDate.getTime();
		}
		else {
			locationCacheModel.createDate = Long.MIN_VALUE;
		}

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{locationId=");
		sb.append(getLocationId());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", lat=");
		sb.append(getLat());
		sb.append(", lng=");
		sb.append(getLng());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append(", imageURL=");
		sb.append(getImageURL());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.mshowcase.model.Location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lat</column-name><column-value><![CDATA[");
		sb.append(getLat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lng</column-name><column-value><![CDATA[");
		sb.append(getLng());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageURL</column-name><column-value><![CDATA[");
		sb.append(getImageURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Location.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Location.class
		};
	private long _locationId;
	private String _address;
	private float _lat;
	private float _lng;
	private long _imageId;
	private String _imageURL;
	private long _userId;
	private String _userUuid;
	private long _companyId;
	private long _groupId;
	private Date _createDate;
	private transient ExpandoBridge _expandoBridge;
	private Location _escapedModelProxy;
}