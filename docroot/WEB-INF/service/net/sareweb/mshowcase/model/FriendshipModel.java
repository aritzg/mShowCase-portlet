/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.mshowcase.model;

import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Friendship service. Represents a row in the &quot;msc_Friendship&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link net.sareweb.mshowcase.model.impl.FriendshipModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link net.sareweb.mshowcase.model.impl.FriendshipImpl}.
 * </p>
 *
 * @author Aritz Galdos
 * @see Friendship
 * @see net.sareweb.mshowcase.model.impl.FriendshipImpl
 * @see net.sareweb.mshowcase.model.impl.FriendshipModelImpl
 * @generated
 */
public interface FriendshipModel extends BaseModel<Friendship> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a friendship model instance should use the {@link Friendship} interface instead.
	 */

	/**
	 * Returns the primary key of this friendship.
	 *
	 * @return the primary key of this friendship
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this friendship.
	 *
	 * @param primaryKey the primary key of this friendship
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the friendship ID of this friendship.
	 *
	 * @return the friendship ID of this friendship
	 */
	public long getFriendshipId();

	/**
	 * Sets the friendship ID of this friendship.
	 *
	 * @param friendshipId the friendship ID of this friendship
	 */
	public void setFriendshipId(long friendshipId);

	/**
	 * Returns the user ID of this friendship.
	 *
	 * @return the user ID of this friendship
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this friendship.
	 *
	 * @param userId the user ID of this friendship
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this friendship.
	 *
	 * @return the user uuid of this friendship
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this friendship.
	 *
	 * @param userUuid the user uuid of this friendship
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user2 ID of this friendship.
	 *
	 * @return the user2 ID of this friendship
	 */
	public long getUser2Id();

	/**
	 * Sets the user2 ID of this friendship.
	 *
	 * @param user2Id the user2 ID of this friendship
	 */
	public void setUser2Id(long user2Id);

	/**
	 * Returns the accepted of this friendship.
	 *
	 * @return the accepted of this friendship
	 */
	public boolean getAccepted();

	/**
	 * Returns <code>true</code> if this friendship is accepted.
	 *
	 * @return <code>true</code> if this friendship is accepted; <code>false</code> otherwise
	 */
	public boolean isAccepted();

	/**
	 * Sets whether this friendship is accepted.
	 *
	 * @param accepted the accepted of this friendship
	 */
	public void setAccepted(boolean accepted);

	/**
	 * Returns the rejected of this friendship.
	 *
	 * @return the rejected of this friendship
	 */
	public boolean getRejected();

	/**
	 * Returns <code>true</code> if this friendship is rejected.
	 *
	 * @return <code>true</code> if this friendship is rejected; <code>false</code> otherwise
	 */
	public boolean isRejected();

	/**
	 * Sets whether this friendship is rejected.
	 *
	 * @param rejected the rejected of this friendship
	 */
	public void setRejected(boolean rejected);

	/**
	 * Returns the company ID of this friendship.
	 *
	 * @return the company ID of this friendship
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this friendship.
	 *
	 * @param companyId the company ID of this friendship
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the create date of this friendship.
	 *
	 * @return the create date of this friendship
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this friendship.
	 *
	 * @param createDate the create date of this friendship
	 */
	public void setCreateDate(Date createDate);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Friendship friendship);

	public int hashCode();

	public CacheModel<Friendship> toCacheModel();

	public Friendship toEscapedModel();

	public String toString();

	public String toXmlString();
}